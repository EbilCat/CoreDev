//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Plugins/CoreDev/DataObjectViewer/DataObjectInspectorControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DataObjectInspectorControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DataObjectInspectorControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DataObjectInspectorControls"",
    ""maps"": [
        {
            ""name"": ""DataObjectRepository"",
            ""id"": ""78d823a8-ab4d-494b-8a91-a87dbd6611da"",
            ""actions"": [
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""d653569f-c13a-4239-a1ac-18fd83435dce"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""86af3bcf-1358-4965-ac81-12769c23400d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a5b4d199-f809-4df8-9233-31e7f5bcb109"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""373ea19d-04fe-4d8c-9189-98cf9296ba83"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DataObjectRepository
        m_DataObjectRepository = asset.FindActionMap("DataObjectRepository", throwIfNotFound: true);
        m_DataObjectRepository_Activate = m_DataObjectRepository.FindAction("Activate", throwIfNotFound: true);
        m_DataObjectRepository_Submit = m_DataObjectRepository.FindAction("Submit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DataObjectRepository
    private readonly InputActionMap m_DataObjectRepository;
    private List<IDataObjectRepositoryActions> m_DataObjectRepositoryActionsCallbackInterfaces = new List<IDataObjectRepositoryActions>();
    private readonly InputAction m_DataObjectRepository_Activate;
    private readonly InputAction m_DataObjectRepository_Submit;
    public struct DataObjectRepositoryActions
    {
        private @DataObjectInspectorControls m_Wrapper;
        public DataObjectRepositoryActions(@DataObjectInspectorControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Activate => m_Wrapper.m_DataObjectRepository_Activate;
        public InputAction @Submit => m_Wrapper.m_DataObjectRepository_Submit;
        public InputActionMap Get() { return m_Wrapper.m_DataObjectRepository; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DataObjectRepositoryActions set) { return set.Get(); }
        public void AddCallbacks(IDataObjectRepositoryActions instance)
        {
            if (instance == null || m_Wrapper.m_DataObjectRepositoryActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DataObjectRepositoryActionsCallbackInterfaces.Add(instance);
            @Activate.started += instance.OnActivate;
            @Activate.performed += instance.OnActivate;
            @Activate.canceled += instance.OnActivate;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
        }

        private void UnregisterCallbacks(IDataObjectRepositoryActions instance)
        {
            @Activate.started -= instance.OnActivate;
            @Activate.performed -= instance.OnActivate;
            @Activate.canceled -= instance.OnActivate;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
        }

        public void RemoveCallbacks(IDataObjectRepositoryActions instance)
        {
            if (m_Wrapper.m_DataObjectRepositoryActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDataObjectRepositoryActions instance)
        {
            foreach (var item in m_Wrapper.m_DataObjectRepositoryActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DataObjectRepositoryActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DataObjectRepositoryActions @DataObjectRepository => new DataObjectRepositoryActions(this);
    public interface IDataObjectRepositoryActions
    {
        void OnActivate(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
    }
}
